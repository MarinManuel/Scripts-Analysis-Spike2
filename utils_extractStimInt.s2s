'# utils_extractStimInt.s2s
'# Marin MANUEL
'#
'# This script is used in conjunction with the Arduino-powered stimulator/repartition unit that I made.
'# The stimulator provides a line of text through the serial line every time it is triggered.
'# However, there is a variable delay between the trigger and the time the serial line is received by
'# Spike2.
'# This script is inteded to be run off-line and will shift each text marker back to the time of the
'# stimulation, and provides a channel providing an analog read-out of the stimulation intensity
'# 
'# the text markers have the format:
'#       < ON,x0.1 ,2.2%,1,+,CV>
'#<OFF,1><OFF,x0.01,77.3%,6,+,CV>
'#1,2;1x1000.00Hz;10us,550mV,588mV;10us,-366mV,-572mV;

#include "includes/incl_constants.s2s"

var startTime, endTime;
var ok% := 0;
var stimTime, markerTime;

startTime := XLow();
endTime := XHigh();

var newMarkerChan%, chanAStimIntChan%, chanBStimIntChan%;
var oldStyle% := 1;

DlgCreate("Parameters");
DlgChan(1,"Notes Channel", 32);
DlgChan(2,"Stim Events Channel", 0x2+0x8+0x20+0x40);
DlgXValue(3,"Start analysis at");
DlgXValue(4,"  End analysis at");
ok% := DlgShow(notesChan%, stimChan%, startTime, endTime);
if ok% then
    var stimText$;
    var stimCode%[4];
    
    stimTime := startTime;
    markerTime := startTime;
    
    'peak through the the notes to find if we have an old style or OctoPrint style notes
    var i%;
    for i%:=1 to 10 do
        markerTime := NextTime(notesChan%, markerTime, stimCode%[], stimText$);
        if markerTime>0 and markerTime<=endTime then
            if extractStimInt(stimText$)>=0 then
                oldStyle% := 1;
                break
            endif
            var dummy[2];
            if extractStimIntOctoStim(stimText$, dummy[])>0 then
                oldStyle% := 0;
                break
            endif
        endif
    next
    
    
    newMarkerChan% := MemChan(8, 100); 'memory channel to hold the displaced notes
    chanAStimIntChan% := MemChan(9,0,BinSize(1)); 'real wave memory channel to hold the stimulation intensity
    if not oldStyle% then
        chanBStimIntChan% := MemChan(9,0,BinSize(1));
    endif
    
    if newMarkerChan%<0 or chanAStimIntChan%<0 then
        Message("ERROR: cannot create new memory channel:\n"+Error$(min(newMarkerChan%,chanAStimIntChan%)));
        halt
    endif
    'display settings
    ChanShow(newMarkerChan%);
    ChanOrder(stimChan%,1);
    
    if oldStyle% then
        ChanTitle$(chanAStimIntChan%,"Stim. Int.");
        ChanUnits$(chanAStimIntChan%,"%");
        ChanProcessAdd(chanAStimIntChan%, 10, 100000, 0.0);
        YRange(chanAStimIntChan%, 0.0, 100.0);
        ChanShow(chanAStimIntChan%);
    else
        ChanTitle$(chanAStimIntChan%,"Int. ChanA");
        ChanUnits$(chanAStimIntChan%,"mV");
        ChanProcessAdd(chanAStimIntChan%, 10, 100000, 0.0);
        YRange(chanAStimIntChan%, 0.0, 100.0);
        ChanShow(chanAStimIntChan%);
        
        ChanTitle$(chanBStimIntChan%,"Int. ChanB");
        ChanUnits$(chanBStimIntChan%,"mV");
        ChanProcessAdd(chanBStimIntChan%, 10, 100000, 0.0);
        YRange(chanBStimIntChan%, 0.0, 100.0);
        ChanShow(chanBStimIntChan%);
    endif
    
    
    
    'find the next event containing a stim
    stimTime := NextTime(stimChan%, stimTime);
    'Cursor(1, stimTime);
    'find the next event containing a stim marker
    markerTime := NextStimMarker(notesChan%, markerTime, stimCode%[], stimText$);
    'Cursor(2, stimTime);
    
    while (stimTime>0 and stimTime<endTime) and (markerTime>0 and markerTime<endTime) do
        'create a new marker at the time of the stimulation
        MemSetItem(newMarkerChan%, 0, stimTime, stimCode%[], stimText$);
        'set the intensity of the stim in the real wave channel
        if oldStyle% then
            MemSetItem(chanAStimIntChan%, 0, stimTime, extractStimInt(stimText$));
        else
            var ints[2];
            extractStimIntOctoStim(stimText$, ints[]);
            MemSetItem(chanAStimIntChan%, 0, stimTime, ints[0]);
            MemSetItem(chanBStimIntChan%, 0, stimTime, ints[1]);
        endif        
        
        'find the next event containing a stim
        stimTime := NextTime(stimChan%, stimTime);
        'Cursor(1, stimTime); 'DEBUG
        'find the next event containing a stim marker
        markerTime := NextStimMarker(notesChan%, markerTime, stimCode%[], stimText$);
        'Cursor(2, markerTime); 'DEBUG
    wend 
    
    if not oldStyle% then
        Optimise(chanAStimIntChan%);
        Optimise(chanBStimIntChan%);
    endif
    
    
endif



func NextStimMarker(chan%, time, &code%[], &stimText$)
    var found% := -1;
    var result := -1;
    var dummy%[4], text$;
    var dummy[2];
    repeat
        time := NextTime(chan%, time, dummy%[], text$);
        if extractStimInt(text$)>=0 or extractStimIntOctoStim(text$, dummy[])>=0 then
            result := time;
            stimText$ := text$;
            ArrConst(code%[], dummy%[]);
            break
        endif
    until time<0;
    return result;
end

func extractStimInt(stimText$)
    var OnOff$, mult$, stimInt, stimChan, stimSign$, stimMode$, multVal;
    var nFields%;
    if Left$(stimText$, 1)<>"<" or Right$(stimText$, 1)<>">" then
        return -1
    endif
    'stimText$ := Mid$(stimText$,2,Len(stimText$)-2); 'takes text, without the <>
    'stimText$ := "< ON,x0.1 ,2.2%,1,+,CV>";
    ReadSetup("><,","","","","><,");
    var fields$[20];
    'nFields% := ReadStr(stimText$, OnOff$, mult$, stimInt, stimChan, stimSign$, stimMode$);
    nFields% := ReadStr(stimText$, fields$[]);
    ReadSetup();
    docase
    case nFields%=7 then
        'old format with only one stim
        OnOff$ := fields$[1];
        mult$ := fields$[2];
        stimInt := Val(fields$[3]);
        stimChan := Val(fields$[4]);
        stimSign$ := fields$[5];
        stimMode$ := fields$[6];
    case nFields%=10 then
        'new format with 2 stims
        OnOff$ := fields$[4];
        mult$ := fields$[5];
        stimInt := Val(fields$[6]);
        stimChan := Val(fields$[7]);
        stimSign$ := fields$[8];
        stimMode$ := fields$[9];
    else
        return -1
    endcase
    multVal := Val(Right$(mult$,Len(mult$)-1));
    if OnOff$="OFF" then
        return 0.0;
    else
        return stimInt*multVal;
    endif
    return -1;
end


func extractStimIntOctoStim(stimText$, stimInts[])
    var nFields%;
    ReadSetup("","","","",";");
    var channelsStr$,freqStr$,stagesStr$[100];
    nFields% := ReadStr(stimText$, channelsStr$, freqStr$, stagesStr$[]);
    ReadSetup();
    
    'Input string has wrong format
    if nFields%<3 then
        return -1;
    endif
    
    var chanA%, chanB%;
    ReadStr(channelsStr$, chanA%, chanB%);
    var stageDur,intA,intB;
    ReadStr(stagesStr$[0], stageDur, intA, intB);
    stimInts[0] := chanA%>0 ? intA : 0.0;
    stimInts[1] := chanB%>0 ? intB : 0.0;
    return 1;
end
